import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Divider,
  TextField,
  InputAdornment,
  IconButton,
  Chip,
  Button,
  Menu,
  MenuItem,
  Tooltip,
  Paper,
  Tab,
  Tabs,
  CircularProgress,
  Alert,
  Modal,
  Select
} from '@mui/material';

// Material Icons
import SearchIcon from '@mui/icons-material/Search';
import FilterListIcon from '@mui/icons-material/FilterList';
import RefreshIcon from '@mui/icons-material/Refresh';
import VisibilityIcon from '@mui/icons-material/Visibility';
import ReplayIcon from '@mui/icons-material/Replay';
import CloseIcon from '@mui/icons-material/Close';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty';
import TuneIcon from '@mui/icons-material/Tune';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import SyncIcon from '@mui/icons-material/Sync';
import NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';

// Charts
import { Chart as ChartJS, ArcElement, Tooltip as ChartTooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title } from 'chart.js';
import { Doughnut, Bar } from 'react-chartjs-2';

// Utilitaires
import axios from '../../utils/axios';
import { useTheme } from '@mui/material/styles';
import { useTheme as useAppTheme } from '../../contexts/ThemeContext';
import { toast } from 'react-toastify';
import { format, parseISO } from 'date-fns';
import { fr } from 'date-fns/locale';

// Enregistrer les composants Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  ChartTooltip,
  Legend
);

const Commissions = () => {
  // Hooks
  const theme = useTheme();
  const { isDarkMode } = useAppTheme();
  
  // États
  const [activeTab, setActiveTab] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [commissions, setCommissions] = useState([]);
  const [filteredCommissions, setFilteredCommissions] = useState([]);
  const [statistics, setStatistics] = useState(null);
  const [packs, setPacks] = useState([]);
  const [commonErrors, setCommonErrors] = useState([]);
  
  // États pour les filtres
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    status: '',
    pack: '',
    level: ''
  });
  const [filterMenuAnchor, setFilterMenuAnchor] = useState(null);
  
  // États pour la pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  
  // États pour les détails et actions
  const [selectedCommission, setSelectedCommission] = useState(null);
  const [retryLoading, setRetryLoading] = useState(false);
  
  // Refs
  const searchInputRef = useRef(null);
  
  // Effets
  useEffect(() => {
    fetchCommissions();
    fetchStatistics();
    fetchPacks();
    fetchCommonErrors();
  }, []);
  
  useEffect(() => {
    if (commissions.length > 0) {
      applyFilters();
    }
  }, [commissions, searchQuery, filters]);
  
  // Fonctions de chargement des données
  const fetchCommissions = async () => {
    try {
      setLoading(true);
      const response = await axios.get('/api/admin/commissions');
      
      if (response.data.success) {
        setCommissions(response.data.data.data);
        setFilteredCommissions(response.data.data.data);
      } else {
        setError('Erreur lors de la récupération des commissions');
      }
    } catch (error) {
      console.error('Erreur lors de la récupération des commissions:', error);
      setError('Erreur lors de la récupération des commissions');
    } finally {
      setLoading(false);
    }
  };
  
  const fetchStatistics = async () => {
    try {
      const response = await axios.get('/api/admin/commissions/statistics');
      
      if (response.data.success) {
        setStatistics(response.data.data);
      }
    } catch (error) {
      console.error('Erreur lors de la récupération des statistiques:', error);
    }
  };
  
  const fetchPacks = async () => {
    try {
      const response = await axios.get('/api/admin/packs');
      
      if (response.data.success) {
        setPacks(response.data.data);
      }
    } catch (error) {
      console.error('Erreur lors de la récupération des packs:', error);
    }
  };
  
  const fetchCommonErrors = async () => {
    try {
      const response = await axios.get('/api/admin/commissions/common-errors');
      
      if (response.data.success) {
        setCommonErrors(response.data.data);
      }
    } catch (error) {
      console.error('Erreur lors de la récupération des erreurs communes:', error);
    }
  };
  
  // Fonctions de gestion des filtres
  const applyFilters = () => {
    let filtered = [...commissions];
    
    // Appliquer les filtres de statut, pack et niveau
    if (filters.status) {
      filtered = filtered.filter(commission => commission.status === filters.status);
    }
    
    if (filters.pack) {
      filtered = filtered.filter(commission => commission.pack && commission.pack.id.toString() === filters.pack);
    }
    
    if (filters.level) {
      filtered = filtered.filter(commission => commission.level.toString() === filters.level);
    }
    
    // Appliquer la recherche
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(commission => 
        (commission.id && commission.id.toString().includes(query)) ||
        (commission.sponsor_user && commission.sponsor_user.name.toLowerCase().includes(query)) ||
        (commission.sponsor_user && commission.sponsor_user.email.toLowerCase().includes(query)) ||
        (commission.source_user && commission.source_user.name.toLowerCase().includes(query)) ||
        (commission.source_user && commission.source_user.email.toLowerCase().includes(query)) ||
        (commission.pack && commission.pack.name.toLowerCase().includes(query)) ||
        (commission.amount && commission.amount.toString().includes(query))
      );
    }
    
    setFilteredCommissions(filtered);
    setPage(0);
  };
  
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };
  
  const handleFilterChange = (key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  };
  
  const resetFilters = () => {
    setFilters({
      status: '',
      pack: '',
      level: ''
    });
    
    setFilterMenuAnchor(null);
  };
  
  // Fonctions de gestion des onglets et de la pagination
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };
  
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Fonctions pour les actions
  const handleViewDetails = (commission) => {
    setSelectedCommission(commission);
  };
  
  const handleRetryCommission = async (id) => {
    try {
      setRetryLoading(true);
      const response = await axios.post(`/api/admin/commissions/${id}/retry`);
      
      if (response.data.success) {
        toast.success('Commission relancée avec succès');
        
        // Mettre à jour les données
        fetchCommissions();
        fetchStatistics();
        
        // Fermer le modal si ouvert
        if (selectedCommission && selectedCommission.id === id) {
          setSelectedCommission(null);
        }
      } else {
        toast.error(response.data.message || 'Erreur lors de la relance de la commission');
      }
    } catch (error) {
      console.error('Erreur lors de la relance de la commission:', error);
      toast.error('Erreur lors de la relance de la commission');
    } finally {
      setRetryLoading(false);
    }
  };
  
  // Fonctions utilitaires
  const formatDate = (dateString) => {
    if (!dateString) return '-';
    
    try {
      const date = parseISO(dateString);
      
      return format(date, 'dd MMMM yyyy à HH:mm', {
        locale: fr
      });
    } catch (error) {
      console.error('Erreur lors du formatage de la date:', error);
      return dateString;
    }
  };
  
  const formatAmount = (amount) => {
    if (amount === undefined || amount === null) return '-';
    
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: 'EUR'
    }).format(amount);
  };
  
  const getStatusLabel = (status) => {
    switch (status) {
      case 'completed': return 'Complétée';
      case 'pending': return 'En attente';
      case 'failed': return 'Échouée';
      default: return status;
    }
  };
  
  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'success';
      case 'pending': return 'warning';
      case 'failed': return 'error';
      default: return 'default';
    }
  };
  
  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircleIcon fontSize="small" />;
      case 'pending': return <HourglassEmptyIcon fontSize="small" />;
      case 'failed': return <ErrorIcon fontSize="small" />;
      default: return null;
    }
  };

  // Composant pour le menu de filtres
  const FilterMenu = () => {
    return (
      <>
        <Box sx={{ p: 2, borderBottom: `1px solid ${isDarkMode ? '#374151' : '#E5E7EB'}` }}>
          <Typography variant="subtitle2" gutterBottom>Filtres</Typography>
          
          <Box sx={{ mt: 2 }}>
            <Typography variant="body2" color="text.secondary" gutterBottom>Statut</Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {['completed', 'pending', 'failed'].map((status) => (
                <Chip 
                  key={status}
                  label={getStatusLabel(status)}
                  color={filters.status === status ? getStatusColor(status) : 'default'}
                  onClick={() => handleFilterChange('status', filters.status === status ? '' : status)}
                  variant={filters.status === status ? 'filled' : 'outlined'}
                  size="small"
                  sx={{ 
                    fontWeight: 500,
                    cursor: 'pointer'
                  }}
                />
              ))}
            </Box>
          </Box>
          
          {packs.length > 0 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>Pack</Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {packs.map((pack) => (
                  <Chip 
                    key={pack.id}
                    label={pack.name}
                    color={filters.pack === pack.id.toString() ? 'primary' : 'default'}
                    onClick={() => handleFilterChange('pack', filters.pack === pack.id.toString() ? '' : pack.id.toString())}
                    variant={filters.pack === pack.id.toString() ? 'filled' : 'outlined'}
                    size="small"
                    sx={{ 
                      fontWeight: 500,
                      cursor: 'pointer'
                    }}
                  />
                ))}
              </Box>
            </Box>
          )}
          
          <Box sx={{ mt: 3 }}>
            <Typography variant="body2" color="text.secondary" gutterBottom>Niveau</Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {[1, 2, 3, 4, 5].map((level) => (
                <Chip 
                  key={level}
                  label={`Niveau ${level}`}
                  color={filters.level === level.toString() ? 'primary' : 'default'}
                  onClick={() => handleFilterChange('level', filters.level === level.toString() ? '' : level.toString())}
                  variant={filters.level === level.toString() ? 'filled' : 'outlined'}
                  size="small"
                  sx={{ 
                    fontWeight: 500,
                    cursor: 'pointer'
                  }}
                />
              ))}
            </Box>
          </Box>
        </Box>
        
        <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end' }}>
          <Button 
            variant="outlined" 
            size="small" 
            onClick={resetFilters}
            startIcon={<RefreshIcon />}
          >
            Réinitialiser
          </Button>
        </Box>
      </>
    );
  };
  
  return (
    <>
      <Box sx={{ width: '100%', p: 3 }}>
        <Typography variant="h4" sx={{ mb: 3, fontWeight: 600 }}>
          Gestion des commissions
        </Typography>
        
        {/* Onglets */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            aria-label="onglets de gestion des commissions"
            sx={{
              '& .MuiTab-root': {
                textTransform: 'none',
                fontWeight: 500,
                fontSize: '0.95rem',
                minWidth: 'auto',
                px: 3
              }
            }}
          >
            <Tab label="Commissions" />
            <Tab label="Statistiques" />
          </Tabs>
        </Box>
        
        {/* Alerte d'erreur */}
        {error && (
          <Alert 
            severity="error" 
            sx={{ mb: 3 }}
            action={
              <IconButton
                aria-label="close"
                color="inherit"
                size="small"
                onClick={() => setError(null)}
              >
                <CloseIcon fontSize="inherit" />
              </IconButton>
            }
          >
            {error}
          </Alert>
        )}
        
        {/* Contenu des onglets */}
        {activeTab === 0 ? (
          <Box>
            {loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
                <CircularProgress />
              </Box>
            ) : statistics ? (
              <>
                {/* Cartes de statistiques */}
                <Grid container spacing={3} sx={{ mb: 4 }}>
                  <Grid item xs={12} sm={6} md={3}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
                      transition: 'transform 0.2s, box-shadow 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)'
                      }
                    }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="text.secondary">
                          Total des commissions
                        </Typography>
                        <Typography variant="h3" sx={{ fontWeight: 600, mb: 1 }}>
                          {statistics.total_count}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Montant: {formatAmount(statistics.total_amount)}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} sm={6} md={3}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
                      transition: 'transform 0.2s, box-shadow 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)'
                      }
                    }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="text.secondary">
                          Commissions complétées
                        </Typography>
                        <Typography variant="h3" sx={{ fontWeight: 600, mb: 1, color: theme.palette.success.main }}>
                          {statistics.completed_count}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Montant: {formatAmount(statistics.completed_amount)}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} sm={6} md={3}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
                      transition: 'transform 0.2s, box-shadow 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)'
                      }
                    }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="text.secondary">
                          Commissions en attente
                        </Typography>
                        <Typography variant="h3" sx={{ fontWeight: 600, mb: 1, color: theme.palette.warning.main }}>
                          {statistics.pending_count}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Montant: {formatAmount(statistics.pending_amount)}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} sm={6} md={3}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
                      transition: 'transform 0.2s, box-shadow 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)'
                      }
                    }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="text.secondary">
                          Commissions échouées
                        </Typography>
                        <Typography variant="h3" sx={{ fontWeight: 600, mb: 1, color: theme.palette.error.main }}>
                          {statistics.failed_count}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Montant: {formatAmount(statistics.failed_amount)}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
                
                {/* Graphiques */}
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
                    }}>
                      <CardContent>
                        <Typography variant="h6" gutterBottom>Répartition des commissions</Typography>
                        <Box sx={{ height: 300, mt: 2 }}>
                          <Doughnut 
                            data={{
                              labels: ['Complétées', 'En attente', 'Échouées'],
                              datasets: [{
                                data: [
                                  statistics.completed_count, 
                                  statistics.pending_count, 
                                  statistics.failed_count
                                ],
                                backgroundColor: [
                                  theme.palette.success.main,
                                  theme.palette.warning.main,
                                  theme.palette.error.main
                                ],
                                borderWidth: 0
                              }]
                            }}
                            options={{
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                legend: {
                                  position: 'bottom',
                                  labels: {
                                    padding: 20,
                                    color: isDarkMode ? '#D1D5DB' : '#4B5563',
                                    font: {
                                      size: 12
                                    }
                                  }
                                },
                                tooltip: {
                                  callbacks: {
                                    label: function(context) {
                                      const label = context.label || '';
                                      const value = context.raw || 0;
                                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                      const percentage = Math.round((value / total) * 100);
                                      return `${label}: ${value} (${percentage}%)`;
                                    }
                                  }
                                }
                              },
                              animation: {
                                animateScale: true,
                                animateRotate: true
                              }
                            }}
                          />
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
                    }}>
                      <CardContent>
                        <Typography variant="h6" gutterBottom>Montants par statut</Typography>
                        <Box sx={{ height: 300, mt: 2 }}>
                          <Bar 
                            data={{
                              labels: ['Complétées', 'En attente', 'Échouées'],
                              datasets: [{
                                label: 'Montant ($)',
                                data: [
                                  statistics.completed_amount, 
                                  statistics.pending_amount, 
                                  statistics.failed_amount
                                ],
                                backgroundColor: [
                                  theme.palette.success.main,
                                  theme.palette.warning.main,
                                  theme.palette.error.main
                                ],
                                borderWidth: 0,
                                borderRadius: 4
                              }]
                            }}
                            options={{
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                legend: {
                                  display: false
                                },
                                tooltip: {
                                  callbacks: {
                                    label: function(context) {
                                      return formatAmount(context.raw);
                                    }
                                  }
                                }
                              },
                              scales: {
                                y: {
                                  beginAtZero: true,
                                  ticks: {
                                    callback: function(value) {
                                      return formatAmount(value);
                                    },
                                    color: isDarkMode ? '#D1D5DB' : '#4B5563'
                                  },
                                  grid: {
                                    color: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)'
                                  }
                                },
                                x: {
                                  ticks: {
                                    color: isDarkMode ? '#D1D5DB' : '#4B5563'
                                  },
                                  grid: {
                                    display: false
                                  }
                                }
                              }
                            }}
                          />
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
                
                {/* Erreurs communes */}
                {commonErrors && commonErrors.length > 0 && (
                  <Grid item xs={12} sx={{ mt: 3 }}>
                    <Card sx={{ 
                      bgcolor: isDarkMode ? '#1f2937' : 'background.paper',
                      borderRadius: 2,
                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
                    }}>
                      <CardContent>
                        <Typography variant="h6" gutterBottom>Erreurs communes</Typography>
                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                          {commonErrors.map((error, index) => (
                            <Card key={index} sx={{ bgcolor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : 'rgba(239, 68, 68, 0.05)' }}>
                              <CardContent>
                                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                                  <ErrorIcon color="error" sx={{ mr: 1 }} />
                                  <Typography variant="subtitle2" color="error.main">
                                    {error.count} occurrences
                                  </Typography>
                                </Box>
                                <Typography variant="body2">
                                  {error.error_message}
                                </Typography>
                              </CardContent>
                            </Card>
                          ))}
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                )}
              </>
            ) : (
              <Box sx={{ textAlign: 'center', py: 8 }}>
                <Typography variant="body1" color="text.secondary">
                  Aucune statistique disponible
                </Typography>
              </Box>
            )}
          </Box>
